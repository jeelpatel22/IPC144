///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Jeelkumar Vinodkumar Patel
Student ID#: 115766222
Email      : jpatel391@myseneca.ca
Section    : NEE

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////





Answers:

Ans(1):((LC == 'l' || LC == 'L') && (CoffeeStrength == 'l' || CoffeeStrength == 'L')) || ((LC == 'm' || LC == 'M') && (CoffeeStrength == 'm' || CoffeeStrength == 'M')) || ((LC == 'r' || LC == 'R') && (CoffeeStrength == 'r' || CoffeeStrength == 'R')), ((dailyServes >= 1 && dailyServes <= 4) && (BW1 >= 0 && BW1 <= 250)) || ((dailyServes >= 5 && dailyServes <= 9) && (BW1 > 250 && BW1 <= 500)) || (dailyServes >= 10 && (BW1 > 500 && BW1 <= 1000)), ((Cr1 == 'y' || Cr1 == 'Y') && (CoffeewithCreamOrNot == 'y' || CoffeewithCreamOrNot == 'Y')) || ((Cr1 == 'n' || Cr1 == 'N') && (CoffeewithCreamOrNot == 'n' || CoffeewithCreamOrNot == 'N')));

       ((MC == 'l' || MC == 'L') && (CoffeeStrength == 'l' || CoffeeStrength == 'L')) || ((MC == 'm' || MC == 'M') && (CoffeeStrength == 'm' || CoffeeStrength == 'M')) || ((MC == 'r' || MC == 'R') && (CoffeeStrength == 'r' || CoffeeStrength == 'R')), ((dailyServes >= 1 && dailyServes <= 4) && (BW2 >= 0 && BW2 <= 250)) || ((dailyServes >= 5 && dailyServes <= 9) && (BW2 > 250 && BW2 <= 500)) || (dailyServes >= 10 && (BW2 > 500 && BW2 <= 1000)), ((Cr2 == 'y' || Cr2 == 'Y') && (CoffeewithCreamOrNot == 'y' || CoffeewithCreamOrNot == 'Y')) || ((Cr2 == 'n' || Cr2 == 'N') && (CoffeewithCreamOrNot == 'n' || CoffeewithCreamOrNot == 'N')));

       ((RC == 'l' || RC == 'L') && (CoffeeStrength == 'l' || CoffeeStrength == 'L')) || ((RC == 'm' || RC == 'M') && (CoffeeStrength == 'm' || CoffeeStrength == 'M')) || ((RC == 'r' || RC == 'R') && (CoffeeStrength == 'r' || CoffeeStrength == 'R')), ((dailyServes >= 1 && dailyServes <= 4) && (BW3 >= 0 && BW3 <= 250)) || ((dailyServes >= 5 && dailyServes <= 9) && (BW3 > 250 && BW3 <= 500)) || (dailyServes >= 10 && (BW3 > 500 && BW3 <= 1000)), ((Cr3 == 'y' || Cr3 == 'Y') && (CoffeewithCreamOrNot == 'y' || CoffeewithCreamOrNot == 'Y')) || ((Cr3 == 'n' || Cr3 == 'N') && (CoffeewithCreamOrNot == 'n' || CoffeewithCreamOrNot == 'N')));


	(A):I have used total 93 relational expression in the above code and there are 60 '==' expressions and 12 '>='and 15 '<=' expressions and 6'>'expressions.

	(b):I have used total 84 logical expressions in the above code and there are 84 and there are 45 '||' expressions and 39 '&&' expressions.


Ans(2):

	This is the first way in which logic can be coded :	
	!(item3 == item2 || item3 == item1);

	
	When we apply DeMorgan's Law we change the '||' operator to '&&' operator and we also 
	change the'!' operator.

	The another way to write this logic is that :

	(item3 == item2 && item3 == item1);
	
	this the another way to write this code without using DeMorgAN's Law.

	
	I have used the first way in my part1 .


Ans(3):In order to get the clear idea about the variables there are some ways by which we
	can get the clear idea about the variables, below are the ways to :
		
	(1) We can comment the whole meaning of variable in the code besides the variable it self

	For example, If  the original name of the variable is 'Light Coffee' and we have named it
	LC then we can do something like this in our code:
	int LC; //LC= Light Coffee
	
	(2) The another way to do this is that we can name the variable in a proper manner and which will help 
	the reader to understand and read easily.

		
	